{
  "version": 3,
  "pages404": true,
  "caseSensitive": false,
  "basePath": "",
  "redirects": [
    {
      "source": "/:file((?!\\.well-known(?:/.*)?)(?:[^/]+/)*[^/]+\\.\\w+)/",
      "destination": "/:file",
      "internal": true,
      "missing": [
        {
          "type": "header",
          "key": "x-nextjs-data"
        }
      ],
      "statusCode": 308,
      "regex": "^(?:/((?!\\.well-known(?:/.*)?)(?:[^/]+/)*[^/]+\\.\\w+))/$"
    },
    {
      "source": "/:notfile((?!\\.well-known(?:/.*)?)(?:[^/]+/)*[^/\\.]+)",
      "destination": "/:notfile/",
      "internal": true,
      "statusCode": 308,
      "regex": "^(?:/((?!\\.well-known(?:/.*)?)(?:[^/]+/)*[^/\\.]+))$"
    }
  ],
  "headers": [],
  "dynamicRoutes": [],
  "staticRoutes": [
    {
      "page": "/",
      "regex": "^/(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/(?:/)?$"
    },
    {
      "page": "/_not-found",
      "regex": "^/_not\\-found(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/_not\\-found(?:/)?$"
    },
    {
      "page": "/agreements/agreement-page1",
      "regex": "^/agreements/agreement\\-page1(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/agreements/agreement\\-page1(?:/)?$"
    },
    {
      "page": "/agreements/agreement-page2",
      "regex": "^/agreements/agreement\\-page2(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/agreements/agreement\\-page2(?:/)?$"
    },
    {
      "page": "/agreements/agreement-pagePy1",
      "regex": "^/agreements/agreement\\-pagePy1(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/agreements/agreement\\-pagePy1(?:/)?$"
    },
    {
      "page": "/agreements/agreement-pagePy2",
      "regex": "^/agreements/agreement\\-pagePy2(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/agreements/agreement\\-pagePy2(?:/)?$"
    },
    {
      "page": "/exam-infos/exam-info1",
      "regex": "^/exam\\-infos/exam\\-info1(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/exam\\-infos/exam\\-info1(?:/)?$"
    },
    {
      "page": "/exam-infos/exam-info2",
      "regex": "^/exam\\-infos/exam\\-info2(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/exam\\-infos/exam\\-info2(?:/)?$"
    },
    {
      "page": "/exam-infos/exam-infoPy1",
      "regex": "^/exam\\-infos/exam\\-infoPy1(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/exam\\-infos/exam\\-infoPy1(?:/)?$"
    },
    {
      "page": "/exam-infos/exam-infoPy2",
      "regex": "^/exam\\-infos/exam\\-infoPy2(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/exam\\-infos/exam\\-infoPy2(?:/)?$"
    },
    {
      "page": "/exam-requirement/exam-requirements1",
      "regex": "^/exam\\-requirement/exam\\-requirements1(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/exam\\-requirement/exam\\-requirements1(?:/)?$"
    },
    {
      "page": "/exam-requirement/exam-requirements2",
      "regex": "^/exam\\-requirement/exam\\-requirements2(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/exam\\-requirement/exam\\-requirements2(?:/)?$"
    },
    {
      "page": "/exam-requirement/exam-requirementsPy1",
      "regex": "^/exam\\-requirement/exam\\-requirementsPy1(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/exam\\-requirement/exam\\-requirementsPy1(?:/)?$"
    },
    {
      "page": "/exam-requirement/exam-requirementsPy2",
      "regex": "^/exam\\-requirement/exam\\-requirementsPy2(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/exam\\-requirement/exam\\-requirementsPy2(?:/)?$"
    },
    {
      "page": "/exam-selection",
      "regex": "^/exam\\-selection(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/exam\\-selection(?:/)?$"
    },
    {
      "page": "/exam-setup",
      "regex": "^/exam\\-setup(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/exam\\-setup(?:/)?$"
    },
    {
      "page": "/exam-start",
      "regex": "^/exam\\-start(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/exam\\-start(?:/)?$"
    },
    {
      "page": "/exams/exam1",
      "regex": "^/exams/exam1(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/exams/exam1(?:/)?$"
    },
    {
      "page": "/exams/exam2",
      "regex": "^/exams/exam2(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/exams/exam2(?:/)?$"
    },
    {
      "page": "/exams/examPy1",
      "regex": "^/exams/examPy1(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/exams/examPy1(?:/)?$"
    },
    {
      "page": "/exams/examPy2",
      "regex": "^/exams/examPy2(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/exams/examPy2(?:/)?$"
    },
    {
      "page": "/proctors/proctor-auth1",
      "regex": "^/proctors/proctor\\-auth1(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/proctors/proctor\\-auth1(?:/)?$"
    },
    {
      "page": "/proctors/proctor-auth2",
      "regex": "^/proctors/proctor\\-auth2(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/proctors/proctor\\-auth2(?:/)?$"
    },
    {
      "page": "/proctors/proctor-authPy1",
      "regex": "^/proctors/proctor\\-authPy1(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/proctors/proctor\\-authPy1(?:/)?$"
    },
    {
      "page": "/proctors/proctor-authPy2",
      "regex": "^/proctors/proctor\\-authPy2(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/proctors/proctor\\-authPy2(?:/)?$"
    },
    {
      "page": "/result/results1",
      "regex": "^/result/results1(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/result/results1(?:/)?$"
    },
    {
      "page": "/result/results2",
      "regex": "^/result/results2(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/result/results2(?:/)?$"
    },
    {
      "page": "/result/resultsPy1",
      "regex": "^/result/resultsPy1(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/result/resultsPy1(?:/)?$"
    },
    {
      "page": "/result/resultsPy2",
      "regex": "^/result/resultsPy2(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/result/resultsPy2(?:/)?$"
    }
  ],
  "dataRoutes": [],
  "rsc": {
    "header": "RSC",
    "varyHeader": "RSC, Next-Router-State-Tree, Next-Router-Prefetch, Next-Router-Segment-Prefetch",
    "prefetchHeader": "Next-Router-Prefetch",
    "didPostponeHeader": "x-nextjs-postponed",
    "contentTypeHeader": "text/x-component",
    "suffix": ".rsc",
    "prefetchSuffix": ".prefetch.rsc",
    "prefetchSegmentHeader": "Next-Router-Segment-Prefetch",
    "prefetchSegmentSuffix": ".segment.rsc",
    "prefetchSegmentDirSuffix": ".segments"
  },
  "rewriteHeaders": {
    "pathHeader": "x-nextjs-rewritten-path",
    "queryHeader": "x-nextjs-rewritten-query"
  },
  "rewrites": []
}