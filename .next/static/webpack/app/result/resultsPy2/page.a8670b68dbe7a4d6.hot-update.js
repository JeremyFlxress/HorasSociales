"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/result/resultsPy2/page",{

/***/ "(app-pages-browser)/./app/data/questionsPy2.js":
/*!**********************************!*\
  !*** ./app/data/questionsPy2.js ***!
  \**********************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   examConfig: () => (/* binding */ examConfig),\n/* harmony export */   questions: () => (/* binding */ questions)\n/* harmony export */ });\nconst questions = [\n    {\n        id: 1,\n        text: \"Complete the function to find the maximum value in a list:\",\n        code: `def find_max(numbers):\n    max_value = numbers[0]\n    for num in numbers:\n        if num > ___:\n            max_value = num\n    return max_value`,\n        type: \"fill-blank\",\n        answer: \"max_value\",\n        points: 25,\n        explanation: \"The function compares each number with the current max_value and updates it if a larger value is found.\",\n        tutorialLink: \"https://www.w3schools.com/python/python_functions.asp\"\n    },\n    {\n        id: 2,\n        text: \"Which method is used to remove a specific item from a list?\",\n        options: [\n            \"A) list.delete(item)\",\n            \"B) list.remove(item)\",\n            \"C) list.discard(item)\",\n            \"D) list.erase(item)\"\n        ],\n        type: \"multiple-choice\",\n        answer: \"B\",\n        points: 25,\n        explanation: \"The remove() method removes the first occurrence of the specified item from a list.\",\n        tutorialLink: \"https://www.w3schools.com/python/python_lists_methods.asp\"\n    },\n    {\n        id: 3,\n        text: \"How do you convert a string to lowercase in Python?\",\n        options: [\n            \"A) str.toLower()\",\n            \"B) str.lowercase()\",\n            \"C) str.lower()\",\n            \"D) lowercase(str)\"\n        ],\n        type: \"multiple-choice\",\n        answer: \"C\",\n        points: 25,\n        explanation: \"The lower() method returns a string where all characters are lowercase.\",\n        tutorialLink: \"https://www.w3schools.com/python/ref_string_lower.asp\"\n    },\n    {\n        id: 4,\n        text: \"Complete the code to split a string into a list:\",\n        code: `sentence = \"Python is awesome\"\nwords = sentence.___()`,\n        type: \"fill-blank\",\n        answer: \"split\",\n        points: 25,\n        explanation: \"The split() method splits a string into a list. By default, it splits on whitespace.\",\n        tutorialLink: \"https://www.w3schools.com/python/ref_string_split.asp\"\n    },\n    {\n        id: 5,\n        text: \"Which operator is used for floor division in Python?\",\n        options: [\n            \"A) /\",\n            \"B) %\",\n            \"C) //\",\n            \"D) **\"\n        ],\n        type: \"multiple-choice\",\n        answer: \"C\",\n        points: 25,\n        explanation: \"The // operator performs floor division, which divides and rounds down to the nearest integer.\",\n        tutorialLink: \"https://www.w3schools.com/python/python_operators.asp\"\n    },\n    {\n        id: 6,\n        text: \"What will be the output of the following code?\",\n        code: `a = [1, 2, 3]\nb = a\nb.append(4)\nprint(a)`,\n        options: [\n            \"A) [1, 2, 3]\",\n            \"B) [1, 2, 3, 4]\",\n            \"C) [4, 1, 2, 3]\",\n            \"D) Error\"\n        ],\n        type: \"multiple-choice\",\n        answer: \"B\",\n        points: 25,\n        explanation: \"In Python, assigning a list to a new variable creates a reference to the same list, not a copy. Changes to b affect a.\",\n        tutorialLink: \"https://www.w3schools.com/python/python_lists.asp\"\n    },\n    {\n        id: 7,\n        text: \"How do you check if a specific key exists in a dictionary?\",\n        options: [\n            \"A) if key in dict:\",\n            \"B) if dict.contains(key):\",\n            \"C) if dict.hasKey(key):\",\n            \"D) if dict.exists(key):\"\n        ],\n        type: \"multiple-choice\",\n        answer: \"A\",\n        points: 25,\n        explanation: \"The 'in' operator can be used to check if a key exists in a dictionary.\",\n        tutorialLink: \"https://www.w3schools.com/python/python_dictionaries.asp\"\n    },\n    {\n        id: 8,\n        text: \"Which data type is immutable in Python?\",\n        options: [\n            \"A) List\",\n            \"B) Dictionary\",\n            \"C) Set\",\n            \"D) Tuple\"\n        ],\n        type: \"multiple-choice\",\n        answer: \"D\",\n        points: 25,\n        explanation: \"Tuples are immutable, meaning their elements cannot be changed after creation.\",\n        tutorialLink: \"https://www.w3schools.com/python/python_tuples.asp\"\n    },\n    {\n        id: 9,\n        text: \"Complete the code to generate a random integer between 1 and 10:\",\n        code: `import random\nnum = random.___(1, 10)`,\n        type: \"fill-blank\",\n        answer: \"randint\",\n        points: 25,\n        explanation: \"The randint() function from the random module generates a random integer between the specified values (inclusive).\",\n        tutorialLink: \"https://www.w3schools.com/python/module_random.asp\"\n    },\n    {\n        id: 10,\n        text: \"Which function is used to sort a list in place?\",\n        options: [\n            \"A) sorted(list)\",\n            \"B) list.sort()\",\n            \"C) list.order()\",\n            \"D) order(list)\"\n        ],\n        type: \"multiple-choice\",\n        answer: \"B\",\n        points: 25,\n        explanation: \"The sort() method sorts a list in place (modifies the original list), while sorted() returns a new sorted list.\",\n        tutorialLink: \"https://www.w3schools.com/python/ref_list_sort.asp\"\n    },\n    {\n        id: 11,\n        text: \"What's the result of bool(0) in Python?\",\n        options: [\n            \"A) True\",\n            \"B) False\",\n            \"C) None\",\n            \"D) Error\"\n        ],\n        type: \"multiple-choice\",\n        answer: \"B\",\n        points: 25,\n        explanation: \"In Python, integers like 0, empty collections, None, and empty strings are considered False when converted to boolean.\",\n        tutorialLink: \"https://www.w3schools.com/python/python_booleans.asp\"\n    },\n    {\n        id: 12,\n        text: \"Which method adds multiple items to a list at once?\",\n        options: [\n            \"A) list.append(items)\",\n            \"B) list.add(items)\",\n            \"C) list.extend(items)\",\n            \"D) list.insert(items)\"\n        ],\n        type: \"multiple-choice\",\n        answer: \"C\",\n        points: 25,\n        explanation: \"The extend() method adds all elements of an iterable to the end of the list.\",\n        tutorialLink: \"https://www.w3schools.com/python/ref_list_extend.asp\"\n    },\n    {\n        id: 13,\n        text: \"Complete the code for a while loop:\",\n        code: `i = 0\n___ i < 5:\n    print(i)\n    i += 1`,\n        type: \"fill-blank\",\n        answer: \"while\",\n        points: 25,\n        explanation: \"The while keyword is used to create a loop that continues as long as the specified condition is true.\",\n        tutorialLink: \"https://www.w3schools.com/python/python_while_loops.asp\"\n    },\n    {\n        id: 14,\n        text: \"Which operator is used for string concatenation in Python?\",\n        options: [\n            \"A) +\",\n            \"B) &\",\n            \"C) .\",\n            \"D) ||\"\n        ],\n        type: \"multiple-choice\",\n        answer: \"A\",\n        points: 25,\n        explanation: \"The + operator is used to concatenate strings in Python.\",\n        tutorialLink: \"https://www.w3schools.com/python/python_strings.asp\"\n    },\n    {\n        id: 15,\n        text: \"Which method checks if a string starts with a specified prefix?\",\n        options: [\n            \"A) string.beginsWith(prefix)\",\n            \"B) string.hasPrefix(prefix)\",\n            \"C) string.startsWith(prefix)\",\n            \"D) string.starts_with(prefix)\"\n        ],\n        type: \"multiple-choice\",\n        answer: \"C\",\n        points: 25,\n        explanation: \"The startswith() method returns True if a string starts with the specified prefix.\",\n        tutorialLink: \"https://www.w3schools.com/python/ref_string_startswith.asp\"\n    },\n    {\n        id: 16,\n        text: \"Complete the code to check if a variable is None:\",\n        code: `if x ___ None:\n    print(\"x is None\")`,\n        type: \"fill-blank\",\n        answer: \"is\",\n        points: 25,\n        explanation: \"The 'is' operator checks for identity (if two variables reference the same object). It's recommended to use 'is' with None.\",\n        tutorialLink: \"https://www.w3schools.com/python/ref_keyword_none.asp\"\n    },\n    {\n        id: 17,\n        text: \"Which function returns a copy of a string with whitespace removed from both ends?\",\n        options: [\n            \"A) string.trim()\",\n            \"B) string.strip()\",\n            \"C) string.clean()\",\n            \"D) string.clear()\"\n        ],\n        type: \"multiple-choice\",\n        answer: \"B\",\n        points: 25,\n        explanation: \"The strip() method removes whitespace from both ends of a string.\",\n        tutorialLink: \"https://www.w3schools.com/python/ref_string_strip.asp\"\n    },\n    {\n        id: 18,\n        text: \"How do you get the absolute value of a number in Python?\",\n        options: [\n            \"A) Math.abs(x)\",\n            \"B) absolute(x)\",\n            \"C) abs(x)\",\n            \"D) x.abs()\"\n        ],\n        type: \"multiple-choice\",\n        answer: \"C\",\n        points: 25,\n        explanation: \"The abs() function returns the absolute value of a number.\",\n        tutorialLink: \"https://www.w3schools.com/python/ref_func_abs.asp\"\n    },\n    {\n        id: 19,\n        text: \"Complete the string method to replace characters in a string:\",\n        code: `text = \"Hello world\"\nnew_text = text.___(\"world\", \"Python\")`,\n        type: \"fill-blank\",\n        answer: \"replace\",\n        points: 25,\n        explanation: \"The replace() method returns a copy of the string with occurrences of the old substring replaced by the new substring.\",\n        tutorialLink: \"https://www.w3schools.com/python/ref_string_replace.asp\"\n    },\n    {\n        id: 20,\n        text: \"Which method removes and returns an item at a specific index from a list?\",\n        options: [\n            \"A) list.get(index)\",\n            \"B) list.extract(index)\",\n            \"C) list.pop(index)\",\n            \"D) list.pull(index)\"\n        ],\n        type: \"multiple-choice\",\n        answer: \"C\",\n        points: 25,\n        explanation: \"The pop() method removes and returns the item at the specified index. If no index is specified, it removes the last item.\",\n        tutorialLink: \"https://www.w3schools.com/python/ref_list_pop.asp\"\n    },\n    {\n        id: 21,\n        text: \"How do you create a copy of a list in Python?\",\n        options: [\n            \"A) list_copy = list\",\n            \"B) list_copy = list.copy()\",\n            \"C) list_copy = copy(list)\",\n            \"D) list_copy = new list()\"\n        ],\n        type: \"multiple-choice\",\n        answer: \"B\",\n        points: 25,\n        explanation: \"The copy() method creates a shallow copy of a list. Alternatives include list[:], list(original_list), or copy.copy(list).\",\n        tutorialLink: \"https://www.w3schools.com/python/ref_list_copy.asp\"\n    },\n    {\n        id: 22,\n        text: \"Complete the code to find the length of a string:\",\n        code: `text = \"Python\"\nlength = ___(text)`,\n        type: \"fill-blank\",\n        answer: \"len\",\n        points: 25,\n        explanation: \"The len() function returns the number of items in an object, such as characters in a string.\",\n        tutorialLink: \"https://www.w3schools.com/python/ref_func_len.asp\"\n    },\n    {\n        id: 23,\n        text: \"What keyword is used to define a base case in a recursive function?\",\n        options: [\n            \"A) base\",\n            \"B) case\",\n            \"C) default\",\n            \"D) if\"\n        ],\n        type: \"multiple-choice\",\n        answer: \"D\",\n        points: 25,\n        explanation: \"Recursive functions typically use 'if' statements to define base cases that stop the recursion.\",\n        tutorialLink: \"https://www.w3schools.com/python/python_functions.asp\"\n    },\n    {\n        id: 24,\n        text: \"Which module provides mathematical functions in Python?\",\n        options: [\n            \"A) mathematics\",\n            \"B) math\",\n            \"C) calc\",\n            \"D) mathlib\"\n        ],\n        type: \"multiple-choice\",\n        answer: \"B\",\n        points: 25,\n        explanation: \"The 'math' module provides mathematical functions like sin(), cos(), sqrt(), etc.\",\n        tutorialLink: \"https://www.w3schools.com/python/module_math.asp\"\n    },\n    {\n        id: 25,\n        text: \"Complete the code to iterate through a range of numbers:\",\n        code: `for i ___ range(1, 6):\n    print(i)`,\n        type: \"fill-blank\",\n        answer: \"in\",\n        points: 25,\n        explanation: \"The 'in' keyword is used in for loops to iterate over sequences like ranges, lists, and strings.\",\n        tutorialLink: \"https://www.w3schools.com/python/python_for_loops.asp\"\n    },\n    {\n        id: 26,\n        text: \"What is the result of 7 % 3 in Python?\",\n        options: [\n            \"A) 1\",\n            \"B) 2\",\n            \"C) 2.33\",\n            \"D) 0\"\n        ],\n        type: \"multiple-choice\",\n        answer: \"A\",\n        points: 25,\n        explanation: \"The % operator returns the remainder of division. 7 divided by 3 is 2 with a remainder of 1.\",\n        tutorialLink: \"https://www.w3schools.com/python/python_operators.asp\"\n    },\n    {\n        id: 27,\n        text: \"Which method checks if all characters in a string are alphabetic?\",\n        options: [\n            \"A) str.alpha()\",\n            \"B) str.isalpha()\",\n            \"C) str.alphabetic()\",\n            \"D) alpha(str)\"\n        ],\n        type: \"multiple-choice\",\n        answer: \"B\",\n        points: 25,\n        explanation: \"The isalpha() method returns True if all characters in the string are alphabetic (letters).\",\n        tutorialLink: \"https://www.w3schools.com/python/ref_string_isalpha.asp\"\n    },\n    {\n        id: 28,\n        text: \"Complete the code to create a set from a list:\",\n        code: `my_list = [1, 2, 2, 3, 4, 4, 5]\nunique_items = ___(my_list)`,\n        type: \"fill-blank\",\n        answer: \"set\",\n        points: 25,\n        explanation: \"The set() function creates a set object from an iterable, removing duplicates in the process.\",\n        tutorialLink: \"https://www.w3schools.com/python/python_sets.asp\"\n    },\n    {\n        id: 29,\n        text: \"How do you access the second element of a list?\",\n        options: [\n            \"A) list[1]\",\n            \"B) list[2]\",\n            \"C) list.get(2)\",\n            \"D) list.at(1)\"\n        ],\n        type: \"multiple-choice\",\n        answer: \"A\",\n        points: 25,\n        explanation: \"Python uses zero-based indexing, so the second element has index 1.\",\n        tutorialLink: \"https://www.w3schools.com/python/python_lists_access.asp\"\n    },\n    {\n        id: 30,\n        text: \"Which function can be used to find the maximum value in a sequence?\",\n        options: [\n            \"A) large()\",\n            \"B) maximum()\",\n            \"C) max()\",\n            \"D) highest()\"\n        ],\n        type: \"multiple-choice\",\n        answer: \"C\",\n        points: 25,\n        explanation: \"The max() function returns the largest item in an iterable or the largest of multiple arguments.\",\n        tutorialLink: \"https://www.w3schools.com/python/ref_func_max.asp\"\n    },\n    {\n        id: 31,\n        text: \"Complete the code to count occurrences of a substring:\",\n        code: `text = \"Mississippi\"\ncount = text.___(\"s\")`,\n        type: \"fill-blank\",\n        answer: \"count\",\n        points: 25,\n        explanation: \"The count() method returns the number of times a specified value appears in the string.\",\n        tutorialLink: \"https://www.w3schools.com/python/ref_string_count.asp\"\n    },\n    {\n        id: 32,\n        text: \"Which statement is used to exit a loop prematurely?\",\n        options: [\n            \"A) exit\",\n            \"B) stop\",\n            \"C) break\",\n            \"D) continue\"\n        ],\n        type: \"multiple-choice\",\n        answer: \"C\",\n        points: 25,\n        explanation: \"The break statement terminates the current loop and resumes execution at the next statement after the loop.\",\n        tutorialLink: \"https://www.w3schools.com/python/python_break.asp\"\n    },\n    {\n        id: 33,\n        text: \"What is the purpose of the pass statement in Python?\",\n        options: [\n            \"A) To skip the rest of the code\",\n            \"B) To act as a placeholder\",\n            \"C) To return from a function\",\n            \"D) To terminate a program\"\n        ],\n        type: \"multiple-choice\",\n        answer: \"B\",\n        points: 25,\n        explanation: \"The pass statement is a null operation; it does nothing. It's used as a placeholder where syntactically code is required.\",\n        tutorialLink: \"https://www.w3schools.com/python/ref_keyword_pass.asp\"\n    },\n    {\n        id: 34,\n        text: \"Complete the code to read lines from a file:\",\n        code: `with open(\"file.txt\", \"r\") as file:\n    lines = file.___()`,\n        type: \"fill-blank\",\n        answer: \"readlines\",\n        points: 25,\n        explanation: \"The readlines() method returns a list containing each line in the file as a list item.\",\n        tutorialLink: \"https://www.w3schools.com/python/python_file_handling.asp\"\n    },\n    {\n        id: 35,\n        text: \"Which method is used to add an element at a specific position in a list?\",\n        options: [\n            \"A) list.append(pos, item)\",\n            \"B) list.add(pos, item)\",\n            \"C) list.insert(pos, item)\",\n            \"D) list.put(pos, item)\"\n        ],\n        type: \"multiple-choice\",\n        answer: \"C\",\n        points: 25,\n        explanation: \"The insert() method adds an element at the specified position in a list.\",\n        tutorialLink: \"https://www.w3schools.com/python/ref_list_insert.asp\"\n    },\n    {\n        id: 36,\n        text: \"What will be the output of this conditional expression?\",\n        code: `x = 5\ny = 10 if x > 3 else 0\nprint(y)`,\n        options: [\n            \"A) 5\",\n            \"B) 10\",\n            \"C) 0\",\n            \"D) Error\"\n        ],\n        type: \"multiple-choice\",\n        answer: \"B\",\n        points: 25,\n        explanation: \"This is a ternary operator in Python. Since the condition x > 3 is True, y gets the value 10.\",\n        tutorialLink: \"https://www.w3schools.com/python/python_conditions.asp\"\n    },\n    {\n        id: 37,\n        text: \"Complete the code to create a reversed copy of a list:\",\n        code: `original = [1, 2, 3, 4, 5]\nreversed_list = original[___]`,\n        type: \"fill-blank\",\n        answer: \"::-1\",\n        points: 25,\n        explanation: \"The slice notation ::-1 creates a copy of the list in reverse order.\",\n        tutorialLink: \"https://www.w3schools.com/python/python_lists_slicing.asp\"\n    },\n    {\n        id: 38,\n        text: \"Which function converts a value to a string in Python?\",\n        options: [\n            \"A) text()\",\n            \"B) str()\",\n            \"C) string()\",\n            \"D) toString()\"\n        ],\n        type: \"multiple-choice\",\n        answer: \"B\",\n        points: 25,\n        explanation: \"The str() function converts a specified value to a string.\",\n        tutorialLink: \"https://www.w3schools.com/python/python_strings.asp\"\n    },\n    {\n        id: 39,\n        text: \"Complete the dictionary comprehension:\",\n        code: `squares = {x: x**2 ___ x in range(5)}`,\n        type: \"fill-blank\",\n        answer: \"for\",\n        points: 25,\n        explanation: \"The 'for' keyword is used in dictionary comprehensions to specify the iteration.\",\n        tutorialLink: \"https://www.w3schools.com/python/python_dictionaries_comprehension.asp\"\n    },\n    {\n        id: 40,\n        text: \"What is the correct way to open a file for writing in Python?\",\n        options: [\n            \"A) open(\\\"file.txt\\\", \\\"w\\\")\",\n            \"B) open(\\\"file.txt\\\", \\\"r\\\")\",\n            \"C) open(\\\"file.txt\\\", \\\"read\\\")\",\n            \"D) open(\\\"file.txt\\\", \\\"write\\\")\"\n        ],\n        type: \"multiple-choice\",\n        answer: \"A\",\n        points: 25,\n        explanation: \"The \\\"w\\\" mode opens a file for writing. If the file exists, it truncates the file. If not, it creates a new file.\",\n        tutorialLink: \"https://www.w3schools.com/python/python_file_handling.asp\"\n    }\n];\nconst examConfig = {\n    totalPoints: 1000,\n    passingScore: 800,\n    timeLimit: 2400,\n    allowedAttempts: Infinity\n};\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./app/data/questionsPy2.js\n"));

/***/ })

});