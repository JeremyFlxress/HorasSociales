"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/result/results1/page",{

/***/ "(app-pages-browser)/./app/data/questions1.js":
/*!********************************!*\
  !*** ./app/data/questions1.js ***!
  \********************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   examConfig: () => (/* binding */ examConfig),\n/* harmony export */   questions: () => (/* binding */ questions)\n/* harmony export */ });\nconst questions = [\n    {\n        id: 1,\n        text: \"Complete the countdown function:\",\n        code: `function countdown(start) {\n  for (var i=start; i>=0; i-___) {\n    console.log(i);\n  }\n}`,\n        type: \"fill-blank\",\n        answer: \"--\",\n        points: 25,\n        explanation: \"The loop needs to decrement the counter using the -- operator.\",\n        tutorialLink: \"https://www.w3schools.com/js/js_loop_for.asp\"\n    },\n    {\n        id: 2,\n        text: \"Which line of code should you use at line 09?\",\n        options: [\n            \"A) document.getElementById(\\\"para\\\").innerHTML += rooms[i];\",\n            \"B) document.getElementById(\\\"para\\\").innerHTML = rooms[i]+ \\\"<br/>\\\";\",\n            \"C) document.getElementById(\\\"para\\\").innerHTML += rooms[i]+<br/>;\",\n            \"D) document.getElementById(\\\"para\\\").innerHTML += rooms[i]+ \\\"<br/>\\\";\"\n        ],\n        type: \"multiple-choice\",\n        answer: \"D\",\n        points: 25,\n        explanation: \"Option D correctly appends each room with a line break.\",\n        tutorialLink: \"https://www.w3schools.com/js/js_htmldom_html.asp\"\n    },\n    {\n        id: 3,\n        text: \"Which symbol is used for single line comments in JavaScript?\",\n        options: [\n            \"A) //\",\n            \"B) /* */\",\n            \"C) #\",\n            \"D) $\"\n        ],\n        type: \"multiple-choice\",\n        answer: \"A\",\n        points: 25,\n        explanation: \"// is used for single line comments, while /* */ is used for multi-line comments.\",\n        tutorialLink: \"https://www.w3schools.com/js/js_comments.asp\"\n    },\n    {\n        id: 4,\n        text: \"Complete the code to display 'Hello World' in an alert box:\",\n        code: `___(\"Hello World\");`,\n        type: \"fill-blank\",\n        answer: \"alert\",\n        points: 25,\n        explanation: \"The alert() function is used to display a dialog box with a message and an OK button.\",\n        tutorialLink: \"https://www.w3schools.com/js/js_popup.asp\"\n    },\n    {\n        id: 5,\n        text: \"Which function is used to add a new element at the end of an array?\",\n        options: [\n            \"A) push()\",\n            \"B) pop()\",\n            \"C) shift()\",\n            \"D) unshift()\"\n        ],\n        type: \"multiple-choice\",\n        answer: \"A\",\n        points: 25,\n        explanation: \"push() adds elements to the end of an array, while pop() removes from the end, shift() removes from the beginning, and unshift() adds to the beginning.\",\n        tutorialLink: \"https://www.w3schools.com/js/js_array_methods.asp\"\n    },\n    {\n        id: 6,\n        text: \"What will be the output of the following code?\",\n        code: `let x = 5;\nconsole.log(x++);`,\n        options: [\n            \"A) 5\",\n            \"B) 6\",\n            \"C) undefined\",\n            \"D) Error\"\n        ],\n        type: \"multiple-choice\",\n        answer: \"A\",\n        points: 25,\n        explanation: \"The post-increment operator (x++) returns the original value before incrementing. So it prints 5, then x becomes 6.\",\n        tutorialLink: \"https://www.w3schools.com/js/js_operators.asp\"\n    },\n    {\n        id: 7,\n        text: \"How do you create a function in JavaScript?\",\n        options: [\n            \"A) function = myFunction() {}\",\n            \"B) function myFunction() {}\",\n            \"C) function:myFunction() {}\",\n            \"D) create function myFunction() {}\"\n        ],\n        type: \"multiple-choice\",\n        answer: \"B\",\n        points: 25,\n        explanation: \"The correct syntax to create a function in JavaScript is using the 'function' keyword followed by the function name and parentheses.\",\n        tutorialLink: \"https://www.w3schools.com/js/js_functions.asp\"\n    },\n    {\n        id: 8,\n        text: \"Which event occurs when a user clicks on an HTML element?\",\n        options: [\n            \"A) onmouseover\",\n            \"B) onchange\",\n            \"C) onclick\",\n            \"D) onmouseclick\"\n        ],\n        type: \"multiple-choice\",\n        answer: \"C\",\n        points: 25,\n        explanation: \"The onclick event occurs when a user clicks on an HTML element.\",\n        tutorialLink: \"https://www.w3schools.com/js/js_events.asp\"\n    },\n    {\n        id: 9,\n        text: \"Complete the code to get the element with ID 'demo':\",\n        code: `document.___(\\\"demo\\\");`,\n        type: \"fill-blank\",\n        answer: \"getElementById\",\n        points: 25,\n        explanation: \"The getElementById() method returns the element with the specified ID.\",\n        tutorialLink: \"https://www.w3schools.com/js/js_htmldom_document.asp\"\n    },\n    {\n        id: 10,\n        text: \"What is the correct syntax for referring to an external JavaScript file?\",\n        options: [\n            \"A) <script href=\\\"script.js\\\">\",\n            \"B) <script name=\\\"script.js\\\">\",\n            \"C) <script src=\\\"script.js\\\">\",\n            \"D) <script file=\\\"script.js\\\">\"\n        ],\n        type: \"multiple-choice\",\n        answer: \"C\",\n        points: 25,\n        explanation: \"The correct attribute to specify the URL of an external JavaScript file is 'src'.\",\n        tutorialLink: \"https://www.w3schools.com/js/js_whereto.asp\"\n    },\n    {\n        id: 11,\n        text: \"How do you write 'Hello World' in an alert box?\",\n        options: [\n            \"A) msgBox(\\\"Hello World\\\");\",\n            \"B) alertBox(\\\"Hello World\\\");\",\n            \"C) msg(\\\"Hello World\\\");\",\n            \"D) alert(\\\"Hello World\\\");\"\n        ],\n        type: \"multiple-choice\",\n        answer: \"D\",\n        points: 25,\n        explanation: \"The alert() function is used to display a message box with a specified message and an OK button.\",\n        tutorialLink: \"https://www.w3schools.com/js/js_popup.asp\"\n    },\n    {\n        id: 12,\n        text: \"How do you create a new array in JavaScript?\",\n        options: [\n            \"A) var colors = \\\"red\\\", \\\"green\\\", \\\"blue\\\";\",\n            \"B) var colors = (1:\\\"red\\\", 2:\\\"green\\\", 3:\\\"blue\\\");\",\n            \"C) var colors = [\\\"red\\\", \\\"green\\\", \\\"blue\\\"];\",\n            \"D) var colors = 1=(\\\"red\\\"), 2=(\\\"green\\\"), 3=(\\\"blue\\\");\"\n        ],\n        type: \"multiple-choice\",\n        answer: \"C\",\n        points: 25,\n        explanation: \"Arrays in JavaScript are defined with square brackets [], with elements separated by commas.\",\n        tutorialLink: \"https://www.w3schools.com/js/js_arrays.asp\"\n    },\n    {\n        id: 13,\n        text: \"Complete the code to add an event listener to a button:\",\n        code: `document.getElementById(\\\"myBtn\\\")._____(\\\"click\\\", function() {\n  alert(\\\"Button was clicked!\\\");\n});`,\n        type: \"fill-blank\",\n        answer: \"addEventListener\",\n        points: 25,\n        explanation: \"The addEventListener() method attaches an event handler to the specified element.\",\n        tutorialLink: \"https://www.w3schools.com/js/js_htmldom_eventlistener.asp\"\n    },\n    {\n        id: 14,\n        text: \"Which operator is used to assign a value to a variable?\",\n        options: [\n            \"A) *\",\n            \"B) =\",\n            \"C) ==\",\n            \"D) -\"\n        ],\n        type: \"multiple-choice\",\n        answer: \"B\",\n        points: 25,\n        explanation: \"The equal sign (=) is the assignment operator. == is the equality operator that compares values.\",\n        tutorialLink: \"https://www.w3schools.com/js/js_operators.asp\"\n    },\n    {\n        id: 15,\n        text: \"How to check if a variable is not equal to a value?\",\n        options: [\n            \"A) if (x <> 5)\",\n            \"B) if (x != 5)\",\n            \"C) if (x !== 5)\",\n            \"D) if (x not 5)\"\n        ],\n        type: \"multiple-choice\",\n        answer: \"B\",\n        points: 25,\n        explanation: \"The != operator checks if values are not equal. !== checks if values are not equal or not of the same type.\",\n        tutorialLink: \"https://www.w3schools.com/js/js_operators.asp\"\n    },\n    {\n        id: 16,\n        text: \"Complete the conditional statement:\",\n        code: `if (age < 18) {\n  result = \\\"Too young\\\";\n} ___ {\n  result = \\\"Old enough\\\";\n}`,\n        type: \"fill-blank\",\n        answer: \"else\",\n        points: 25,\n        explanation: \"The else statement specifies a block of code to be executed if the condition in the if statement is false.\",\n        tutorialLink: \"https://www.w3schools.com/js/js_if_else.asp\"\n    },\n    {\n        id: 17,\n        text: \"Which method returns the first element that matches a specified CSS selector?\",\n        options: [\n            \"A) querySelector()\",\n            \"B) getElementById()\",\n            \"C) getElementsByClassName()\",\n            \"D) getElementsByTagName()\"\n        ],\n        type: \"multiple-choice\",\n        answer: \"A\",\n        points: 25,\n        explanation: \"querySelector() returns the first element that matches a specified CSS selector.\",\n        tutorialLink: \"https://www.w3schools.com/js/js_htmldom_elements.asp\"\n    },\n    {\n        id: 18,\n        text: \"How do you round the number 7.25 to the nearest integer?\",\n        options: [\n            \"A) Math.round(7.25)\",\n            \"B) Math.rnd(7.25)\",\n            \"C) round(7.25)\",\n            \"D) rnd(7.25)\"\n        ],\n        type: \"multiple-choice\",\n        answer: \"A\",\n        points: 25,\n        explanation: \"Math.round() returns the nearest integer to a given number.\",\n        tutorialLink: \"https://www.w3schools.com/js/js_math.asp\"\n    },\n    {\n        id: 19,\n        text: \"Complete the template literal syntax:\",\n        code: `let name = \\\"John\\\";\nlet greeting = \\`Hello, ___\\`;`,\n        type: \"fill-blank\",\n        answer: \"${name}\",\n        points: 25,\n        explanation: \"Template literals use ${expression} to embed expressions within the string.\",\n        tutorialLink: \"https://www.w3schools.com/js/js_string_templates.asp\"\n    },\n    {\n        id: 20,\n        text: \"Which method is used to remove the last element from an array?\",\n        options: [\n            \"A) last()\",\n            \"B) get()\",\n            \"C) pop()\",\n            \"D) remove()\"\n        ],\n        type: \"multiple-choice\",\n        answer: \"C\",\n        points: 25,\n        explanation: \"The pop() method removes the last element from an array and returns that element.\",\n        tutorialLink: \"https://www.w3schools.com/js/js_array_methods.asp\"\n    },\n    {\n        id: 21,\n        text: \"How to declare a JavaScript object?\",\n        options: [\n            \"A) var person = Object();\",\n            \"B) var person = {};\",\n            \"C) var person = [];\",\n            \"D) var person = new Array();\"\n        ],\n        type: \"multiple-choice\",\n        answer: \"B\",\n        points: 25,\n        explanation: \"Objects in JavaScript can be created using object literals, which are defined with curly braces {}.\",\n        tutorialLink: \"https://www.w3schools.com/js/js_objects.asp\"\n    },\n    {\n        id: 22,\n        text: \"Complete the code to convert a string to a number:\",\n        code: `let num = ___(\\\"42\\\");`,\n        type: \"fill-blank\",\n        answer: \"parseInt\",\n        points: 25,\n        explanation: \"The parseInt() function parses a string and returns an integer. Another valid answer could be Number.\",\n        tutorialLink: \"https://www.w3schools.com/js/js_type_conversion.asp\"\n    },\n    {\n        id: 23,\n        text: \"What does the 'this' keyword refer to in JavaScript?\",\n        options: [\n            \"A) The current function\",\n            \"B) The global object\",\n            \"C) The object the function is a property of\",\n            \"D) It depends on how the function is called\"\n        ],\n        type: \"multiple-choice\",\n        answer: \"D\",\n        points: 25,\n        explanation: \"The value of 'this' depends on how a function is called. It can refer to different objects depending on the context.\",\n        tutorialLink: \"https://www.w3schools.com/js/js_this.asp\"\n    },\n    {\n        id: 24,\n        text: \"Which method is used to serialize an object into a JSON string?\",\n        options: [\n            \"A) JSON.parse()\",\n            \"B) JSON.stringify()\",\n            \"C) JSON.toText()\",\n            \"D) JSON.toString()\"\n        ],\n        type: \"multiple-choice\",\n        answer: \"B\",\n        points: 25,\n        explanation: \"JSON.stringify() converts a JavaScript object into a JSON string.\",\n        tutorialLink: \"https://www.w3schools.com/js/js_json_stringify.asp\"\n    },\n    {\n        id: 25,\n        text: \"Complete the code to handle errors:\",\n        code: `try {\n  // Code that might throw an error\n} ___ (error) {\n  console.log(error.message);\n}`,\n        type: \"fill-blank\",\n        answer: \"catch\",\n        points: 25,\n        explanation: \"The catch statement lets you handle the error if an exception is thrown in the try block.\",\n        tutorialLink: \"https://www.w3schools.com/js/js_errors.asp\"\n    },\n    {\n        id: 26,\n        text: \"What is the output of: typeof []?\",\n        options: [\n            \"A) \\\"array\\\"\",\n            \"B) \\\"object\\\"\",\n            \"C) \\\"undefined\\\"\",\n            \"D) \\\"null\\\"\"\n        ],\n        type: \"multiple-choice\",\n        answer: \"B\",\n        points: 25,\n        explanation: \"In JavaScript, arrays are a type of object, so typeof [] returns \\\"object\\\".\",\n        tutorialLink: \"https://www.w3schools.com/js/js_datatypes.asp\"\n    },\n    {\n        id: 27,\n        text: \"Which method removes the first element of an array?\",\n        options: [\n            \"A) shift()\",\n            \"B) unshift()\",\n            \"C) pop()\",\n            \"D) splice()\"\n        ],\n        type: \"multiple-choice\",\n        answer: \"A\",\n        points: 25,\n        explanation: \"The shift() method removes the first element from an array and returns that element.\",\n        tutorialLink: \"https://www.w3schools.com/js/js_array_methods.asp\"\n    },\n    {\n        id: 28,\n        text: \"Complete the loop that iterates over array elements:\",\n        code: `const fruits = [\\\"apple\\\", \\\"banana\\\", \\\"orange\\\"];\nfor (___ fruit of fruits) {\n  console.log(fruit);\n}`,\n        type: \"fill-blank\",\n        answer: \"let\",\n        points: 25,\n        explanation: \"The for...of loop needs a variable declaration with let, const, or var to store each array element during iteration.\",\n        tutorialLink: \"https://www.w3schools.com/js/js_loop_forof.asp\"\n    },\n    {\n        id: 29,\n        text: \"How do you access the value of a property in a JavaScript object?\",\n        options: [\n            \"A) person->name\",\n            \"B) person.name or person[\\\"name\\\"]\",\n            \"C) person=>name\",\n            \"D) person::name\"\n        ],\n        type: \"multiple-choice\",\n        answer: \"B\",\n        points: 25,\n        explanation: \"In JavaScript, object properties can be accessed using dot notation (object.property) or bracket notation (object[\\\"property\\\"]).\",\n        tutorialLink: \"https://www.w3schools.com/js/js_objects.asp\"\n    },\n    {\n        id: 30,\n        text: \"Which function is used to execute code after a specified time interval?\",\n        options: [\n            \"A) setTimeout()\",\n            \"B) setInterval()\",\n            \"C) delay()\",\n            \"D) sleep()\"\n        ],\n        type: \"multiple-choice\",\n        answer: \"A\",\n        points: 25,\n        explanation: \"setTimeout() executes a function once after a specified delay. setInterval() repeatedly executes a function.\",\n        tutorialLink: \"https://www.w3schools.com/js/js_timing.asp\"\n    },\n    {\n        id: 31,\n        text: \"Complete the code to select all paragraph elements:\",\n        code: `const paragraphs = document._____(\\\"p\\\");`,\n        type: \"fill-blank\",\n        answer: \"querySelectorAll\",\n        points: 25,\n        explanation: \"querySelectorAll() returns all elements that match the specified CSS selector.\",\n        tutorialLink: \"https://www.w3schools.com/js/js_htmldom_elements.asp\"\n    },\n    {\n        id: 32,\n        text: \"Which method is used to join the elements of an array into a string?\",\n        options: [\n            \"A) concat()\",\n            \"B) merge()\",\n            \"C) join()\",\n            \"D) combine()\"\n        ],\n        type: \"multiple-choice\",\n        answer: \"C\",\n        points: 25,\n        explanation: \"The join() method joins all elements of an array into a string and returns this string.\",\n        tutorialLink: \"https://www.w3schools.com/js/js_array_methods.asp\"\n    },\n    {\n        id: 33,\n        text: \"What is the spread operator in JavaScript?\",\n        options: [\n            \"A) ...\",\n            \"B) ***\",\n            \"C) &&&\",\n            \"D) ===\"\n        ],\n        type: \"multiple-choice\",\n        answer: \"A\",\n        points: 25,\n        explanation: \"The spread syntax (...) allows an iterable to be expanded in places where zero or more arguments or elements are expected.\",\n        tutorialLink: \"https://www.w3schools.com/js/js_es6.asp\"\n    },\n    {\n        id: 34,\n        text: \"Complete the code to create a promise:\",\n        code: `const myPromise = new ___(function(resolve, reject) {\n  // async operation\n});`,\n        type: \"fill-blank\",\n        answer: \"Promise\",\n        points: 25,\n        explanation: \"A Promise object represents a value that may not be available yet but will be resolved at some point in the future.\",\n        tutorialLink: \"https://www.w3schools.com/js/js_promise.asp\"\n    },\n    {\n        id: 35,\n        text: \"Which method is used to find an element in an array that satisfies a condition?\",\n        options: [\n            \"A) filter()\",\n            \"B) find()\",\n            \"C) search()\",\n            \"D) locate()\"\n        ],\n        type: \"multiple-choice\",\n        answer: \"B\",\n        points: 25,\n        explanation: \"The find() method returns the first element in an array that passes a test function.\",\n        tutorialLink: \"https://www.w3schools.com/js/js_array_methods.asp\"\n    },\n    {\n        id: 36,\n        text: \"What is the result of 10 + '5' in JavaScript?\",\n        options: [\n            \"A) 15\",\n            \"B) \\\"105\\\"\",\n            \"C) Error\",\n            \"D) \\\"10+5\\\"\"\n        ],\n        type: \"multiple-choice\",\n        answer: \"B\",\n        points: 25,\n        explanation: \"When a number is added to a string, JavaScript converts the number to a string and performs string concatenation, resulting in \\\"105\\\".\",\n        tutorialLink: \"https://www.w3schools.com/js/js_type_conversion.asp\"\n    },\n    {\n        id: 37,\n        text: \"Complete the code to destructure an array:\",\n        code: `const numbers = [1, 2, 3, 4, 5];\nconst [first, second, ...___] = numbers;`,\n        type: \"fill-blank\",\n        answer: \"rest\",\n        points: 25,\n        explanation: \"The rest parameter syntax (...) collects the remaining elements of an array. Any variable name can be used, but 'rest' is common.\",\n        tutorialLink: \"https://www.w3schools.com/js/js_es6.asp\"\n    },\n    {\n        id: 38,\n        text: \"Which keyword is used to declare a block-scoped variable that cannot be reassigned?\",\n        options: [\n            \"A) var\",\n            \"B) let\",\n            \"C) const\",\n            \"D) fixed\"\n        ],\n        type: \"multiple-choice\",\n        answer: \"C\",\n        points: 25,\n        explanation: \"The const keyword declares a block-scoped variable that cannot be reassigned after declaration.\",\n        tutorialLink: \"https://www.w3schools.com/js/js_es6.asp\"\n    },\n    {\n        id: 39,\n        text: \"Complete the arrow function:\",\n        code: `const multiply = (a, b) ___ a * b;`,\n        type: \"fill-blank\",\n        answer: \"=>\",\n        points: 25,\n        explanation: \"The arrow function syntax uses => to separate the parameter list from the function body.\",\n        tutorialLink: \"https://www.w3schools.com/js/js_arrow_function.asp\"\n    },\n    {\n        id: 40,\n        text: \"Which method creates a new array with the results of calling a provided function on every element?\",\n        options: [\n            \"A) forEach()\",\n            \"B) map()\",\n            \"C) reduce()\",\n            \"D) filter()\"\n        ],\n        type: \"multiple-choice\",\n        answer: \"B\",\n        points: 25,\n        explanation: \"The map() method creates a new array with the results of calling a function on every element in the original array.\",\n        tutorialLink: \"https://www.w3schools.com/js/js_array_methods.asp\"\n    }\n];\nconst examConfig = {\n    totalPoints: 1000,\n    passingScore: 800,\n    timeLimit: 2400,\n    allowedAttempts: 3\n};\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./app/data/questions1.js\n"));

/***/ })

});