"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/exams/examPy1/page",{

/***/ "(app-pages-browser)/./app/data/questionsPy1.js":
/*!**********************************!*\
  !*** ./app/data/questionsPy1.js ***!
  \**********************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   examConfig: () => (/* binding */ examConfig),\n/* harmony export */   questions: () => (/* binding */ questions)\n/* harmony export */ });\nconst questions = [\n    {\n        id: 1,\n        text: \"Complete the function to print numbers in reverse order:\",\n        code: `def countdown(start):\n  for i in range(start, -1, ___):\n    print(i)`,\n        type: \"fill-blank\",\n        answer: \"-1\",\n        points: 25,\n        explanation: \"In Python's range() function, the third parameter specifies the step value. Using -1 makes it count down by 1.\",\n        tutorialLink: \"https://www.w3schools.com/python/python_for_loops.asp\"\n    },\n    {\n        id: 2,\n        text: \"Which line of code will correctly append an item to a list?\",\n        options: [\n            \"A) my_list.add(item)\",\n            \"B) my_list.append(item)\",\n            \"C) my_list.insert(item)\",\n            \"D) my_list.push(item)\"\n        ],\n        type: \"multiple-choice\",\n        answer: \"B\",\n        points: 25,\n        explanation: \"The append() method is used to add an item to the end of a list in Python.\",\n        tutorialLink: \"https://www.w3schools.com/python/python_lists.asp\"\n    },\n    {\n        id: 3,\n        text: \"What symbol is used for single-line comments in Python?\",\n        options: [\n            \"A) //\",\n            \"B) /* */\",\n            \"C) #\",\n            \"D) --\"\n        ],\n        type: \"multiple-choice\",\n        answer: \"C\",\n        points: 25,\n        explanation: \"Python uses the hash symbol (#) for single-line comments. Multi-line comments use triple quotes (''' or \\\"\\\"\\\").\",\n        tutorialLink: \"https://www.w3schools.com/python/python_comments.asp\"\n    },\n    {\n        id: 4,\n        text: \"Complete the code to display a message to the user:\",\n        code: `___(\\\"Hello, welcome to Python!\\\")`,\n        type: \"fill-blank\",\n        answer: \"print\",\n        points: 25,\n        explanation: \"The print() function is used to display output to the console in Python.\",\n        tutorialLink: \"https://www.w3schools.com/python/ref_func_print.asp\"\n    },\n    {\n        id: 5,\n        text: \"Which method is used to get the length of a list?\",\n        options: [\n            \"A) list.size()\",\n            \"B) list.length()\",\n            \"C) len(list)\",\n            \"D) list.count()\"\n        ],\n        type: \"multiple-choice\",\n        answer: \"C\",\n        points: 25,\n        explanation: \"The len() function is used to get the number of items in a list, string, or other sequence types in Python.\",\n        tutorialLink: \"https://www.w3schools.com/python/ref_func_len.asp\"\n    },\n    {\n        id: 6,\n        text: \"What will be the output of the following code?\",\n        code: `x = 5\nprint(x)\nx += 1`,\n        options: [\n            \"A) 5\",\n            \"B) 6\",\n            \"C) undefined\",\n            \"D) Error\"\n        ],\n        type: \"multiple-choice\",\n        answer: \"A\",\n        points: 25,\n        explanation: \"The code first assigns 5 to x, then prints the value of x (which is 5), and finally increments x by 1. But the incremented value is not printed.\",\n        tutorialLink: \"https://www.w3schools.com/python/python_operators.asp\"\n    },\n    {\n        id: 7,\n        text: \"How do you define a function in Python?\",\n        options: [\n            \"A) function myFunction(): {}\",\n            \"B) def myFunction(): pass\",\n            \"C) define myFunction(): pass\",\n            \"D) func myFunction(): pass\"\n        ],\n        type: \"multiple-choice\",\n        answer: \"B\",\n        points: 25,\n        explanation: \"In Python, functions are defined using the 'def' keyword followed by the function name, parameters in parentheses, and a colon.\",\n        tutorialLink: \"https://www.w3schools.com/python/python_functions.asp\"\n    },\n    {\n        id: 8,\n        text: \"Which data structure is used to store key-value pairs in Python?\",\n        options: [\n            \"A) list\",\n            \"B) tuple\",\n            \"C) dictionary\",\n            \"D) set\"\n        ],\n        type: \"multiple-choice\",\n        answer: \"C\",\n        points: 25,\n        explanation: \"Dictionaries in Python store data as key-value pairs and are defined using curly braces {}.\",\n        tutorialLink: \"https://www.w3schools.com/python/python_dictionaries.asp\"\n    },\n    {\n        id: 9,\n        text: \"Complete the code to open a file for reading:\",\n        code: `with ___(\\\"data.txt\\\", \\\"r\\\") as file:\n    content = file.read()`,\n        type: \"fill-blank\",\n        answer: \"open\",\n        points: 25,\n        explanation: \"The open() function is used to open files in Python. The 'r' parameter specifies read mode.\",\n        tutorialLink: \"https://www.w3schools.com/python/python_file_open.asp\"\n    },\n    {\n        id: 10,\n        text: \"What is the correct way to import a module in Python?\",\n        options: [\n            \"A) include math\",\n            \"B) #include <math>\",\n            \"C) import math\",\n            \"D) using math\"\n        ],\n        type: \"multiple-choice\",\n        answer: \"C\",\n        points: 25,\n        explanation: \"The import statement is used to import modules in Python. You can import the entire module or specific functions.\",\n        tutorialLink: \"https://www.w3schools.com/python/python_modules.asp\"\n    },\n    {\n        id: 11,\n        text: \"How do you create a list in Python?\",\n        options: [\n            \"A) list = (1, 2, 3)\",\n            \"B) list = {1, 2, 3}\",\n            \"C) list = [1, 2, 3]\",\n            \"D) list = <1, 2, 3>\"\n        ],\n        type: \"multiple-choice\",\n        answer: \"C\",\n        points: 25,\n        explanation: \"Lists in Python are created using square brackets [] with elements separated by commas.\",\n        tutorialLink: \"https://www.w3schools.com/python/python_lists.asp\"\n    },\n    {\n        id: 12,\n        text: \"Which method is used to add an element to a set?\",\n        options: [\n            \"A) set.add(element)\",\n            \"B) set.append(element)\",\n            \"C) set.insert(element)\",\n            \"D) set.push(element)\"\n        ],\n        type: \"multiple-choice\",\n        answer: \"A\",\n        points: 25,\n        explanation: \"The add() method is used to add an element to a set in Python. Unlike lists, sets don't have append() or insert() methods.\",\n        tutorialLink: \"https://www.w3schools.com/python/python_sets.asp\"\n    },\n    {\n        id: 13,\n        text: \"Complete the code for list comprehension that creates a list of squares:\",\n        code: `squares = [x**2 ___ x in range(10)]`,\n        type: \"fill-blank\",\n        answer: \"for\",\n        points: 25,\n        explanation: \"In a list comprehension, the 'for' keyword is used to specify the iteration part.\",\n        tutorialLink: \"https://www.w3schools.com/python/python_lists_comprehension.asp\"\n    },\n    {\n        id: 14,\n        text: \"Which operator is used for exponentiation in Python?\",\n        options: [\n            \"A) ^\",\n            \"B) **\",\n            \"C) //\",\n            \"D) %%\"\n        ],\n        type: \"multiple-choice\",\n        answer: \"B\",\n        points: 25,\n        explanation: \"In Python, the ** operator is used for exponentiation. For example, 2**3 equals 8.\",\n        tutorialLink: \"https://www.w3schools.com/python/python_operators.asp\"\n    },\n    {\n        id: 15,\n        text: \"How do you check if two variables are equal in value and type?\",\n        options: [\n            \"A) if a == b:\",\n            \"B) if a === b:\",\n            \"C) if a is b:\",\n            \"D) if a equals b:\"\n        ],\n        type: \"multiple-choice\",\n        answer: \"C\",\n        points: 25,\n        explanation: \"The 'is' operator checks if two variables refer to the same object in memory. For value comparison, use the '==' operator.\",\n        tutorialLink: \"https://www.w3schools.com/python/python_operators.asp\"\n    },\n    {\n        id: 16,\n        text: \"Complete the conditional statement:\",\n        code: `if age < 18:\n    print(\\\"Too young\\\")\n___ age < 65:\n    print(\\\"Working age\\\")\nelse:\n    print(\\\"Retirement age\\\")`,\n        type: \"fill-blank\",\n        answer: \"elif\",\n        points: 25,\n        explanation: \"In Python, 'elif' is short for 'else if' and is used for multiple conditional statements.\",\n        tutorialLink: \"https://www.w3schools.com/python/python_conditions.asp\"\n    },\n    {\n        id: 17,\n        text: \"Which module is used for working with regular expressions in Python?\",\n        options: [\n            \"A) regex\",\n            \"B) re\",\n            \"C) regexp\",\n            \"D) pyregex\"\n        ],\n        type: \"multiple-choice\",\n        answer: \"B\",\n        points: 25,\n        explanation: \"The 're' module provides support for regular expressions in Python.\",\n        tutorialLink: \"https://www.w3schools.com/python/python_regex.asp\"\n    },\n    {\n        id: 18,\n        text: \"How do you round a number to the nearest integer in Python?\",\n        options: [\n            \"A) math.round(7.25)\",\n            \"B) round(7.25)\",\n            \"C) int(7.25)\",\n            \"D) ceil(7.25)\"\n        ],\n        type: \"multiple-choice\",\n        answer: \"B\",\n        points: 25,\n        explanation: \"The round() function rounds a number to the nearest integer. int() truncates the decimal part.\",\n        tutorialLink: \"https://www.w3schools.com/python/ref_func_round.asp\"\n    },\n    {\n        id: 19,\n        text: \"Complete the f-string syntax:\",\n        code: `name = \\\"Alice\\\"\ngreeting = f\\\"Hello, ___\\\"`,\n        type: \"fill-blank\",\n        answer: \"{name}\",\n        points: 25,\n        explanation: \"F-strings use {variable} syntax to embed expressions inside string literals.\",\n        tutorialLink: \"https://www.w3schools.com/python/python_string_formatting.asp\"\n    },\n    {\n        id: 20,\n        text: \"Which method is used to remove and return the last element from a list?\",\n        options: [\n            \"A) list.last()\",\n            \"B) list.get()\",\n            \"C) list.pop()\",\n            \"D) list.remove()\"\n        ],\n        type: \"multiple-choice\",\n        answer: \"C\",\n        points: 25,\n        explanation: \"The pop() method removes and returns the last element from a list by default, or a specified index.\",\n        tutorialLink: \"https://www.w3schools.com/python/ref_list_pop.asp\"\n    },\n    {\n        id: 21,\n        text: \"How do you create an empty dictionary in Python?\",\n        options: [\n            \"A) dict()\",\n            \"B) {}\",\n            \"C) []\",\n            \"D) Both A and B\"\n        ],\n        type: \"multiple-choice\",\n        answer: \"D\",\n        points: 25,\n        explanation: \"You can create an empty dictionary using either the dict() constructor or empty curly braces {}.\",\n        tutorialLink: \"https://www.w3schools.com/python/python_dictionaries.asp\"\n    },\n    {\n        id: 22,\n        text: \"Complete the code to convert a string to an integer:\",\n        code: `num = ___(\\\"42\\\")`,\n        type: \"fill-blank\",\n        answer: \"int\",\n        points: 25,\n        explanation: \"The int() function converts a string or number to an integer.\",\n        tutorialLink: \"https://www.w3schools.com/python/python_numbers.asp\"\n    },\n    {\n        id: 23,\n        text: \"What does the 'self' parameter refer to in a class method?\",\n        options: [\n            \"A) The class itself\",\n            \"B) The instance of the class\",\n            \"C) The parent class\",\n            \"D) The global namespace\"\n        ],\n        type: \"multiple-choice\",\n        answer: \"B\",\n        points: 25,\n        explanation: \"In Python class methods, 'self' refers to the instance of the class that the method is called on.\",\n        tutorialLink: \"https://www.w3schools.com/python/python_classes.asp\"\n    },\n    {\n        id: 24,\n        text: \"Which module is used to work with JSON data in Python?\",\n        options: [\n            \"A) jsonlib\",\n            \"B) json\",\n            \"C) pyjson\",\n            \"D) jsonparser\"\n        ],\n        type: \"multiple-choice\",\n        answer: \"B\",\n        points: 25,\n        explanation: \"The built-in 'json' module provides functions for working with JSON data, such as json.dumps() and json.loads().\",\n        tutorialLink: \"https://www.w3schools.com/python/python_json.asp\"\n    },\n    {\n        id: 25,\n        text: \"Complete the code to handle exceptions:\",\n        code: `try:\n    # Code that might raise an exception\n___ FileNotFoundError:\n    print(\\\"File not found!\\\")`,\n        type: \"fill-blank\",\n        answer: \"except\",\n        points: 25,\n        explanation: \"The except clause catches and handles exceptions raised in the try block.\",\n        tutorialLink: \"https://www.w3schools.com/python/python_try_except.asp\"\n    },\n    {\n        id: 26,\n        text: \"What is the result of type([]) in Python?\",\n        options: [\n            \"A) 'array'\",\n            \"B) 'list'\",\n            \"C) <class 'list'>\",\n            \"D) <class 'array'>\"\n        ],\n        type: \"multiple-choice\",\n        answer: \"C\",\n        points: 25,\n        explanation: \"In Python, type([]) returns <class 'list'>, indicating that [] is an instance of the list class.\",\n        tutorialLink: \"https://www.w3schools.com/python/ref_func_type.asp\"\n    },\n    {\n        id: 27,\n        text: \"Which method is used to remove an item from a list by its index?\",\n        options: [\n            \"A) list.remove(index)\",\n            \"B) list.pop(index)\",\n            \"C) list.delete(index)\",\n            \"D) list.discard(index)\"\n        ],\n        type: \"multiple-choice\",\n        answer: \"B\",\n        points: 25,\n        explanation: \"The pop(index) method removes and returns the item at the specified index. If no index is specified, it removes the last item.\",\n        tutorialLink: \"https://www.w3schools.com/python/ref_list_pop.asp\"\n    },\n    {\n        id: 28,\n        text: \"Complete the code to iterate over a dictionary:\",\n        code: `for key, value ___ my_dict.items():\n    print(f\\\"{key}: {value}\\\")`,\n        type: \"fill-blank\",\n        answer: \"in\",\n        points: 25,\n        explanation: \"The 'in' keyword is used in for loops to iterate over sequences, including dictionary items.\",\n        tutorialLink: \"https://www.w3schools.com/python/python_dictionaries_loop.asp\"\n    },\n    {\n        id: 29,\n        text: \"How do you access the value of a key in a dictionary?\",\n        options: [\n            \"A) dict->key\",\n            \"B) dict.key or dict[\\\"key\\\"]\",\n            \"C) dict[\\\"key\\\"]\",\n            \"D) dict.get(\\\"key\\\")\"\n        ],\n        type: \"multiple-choice\",\n        answer: \"D\",\n        points: 25,\n        explanation: \"Both dict[\\\"key\\\"] and dict.get(\\\"key\\\") access values, but get() is safer as it returns None (or a default value) if the key doesn't exist.\",\n        tutorialLink: \"https://www.w3schools.com/python/ref_dictionary_get.asp\"\n    },\n    {\n        id: 30,\n        text: \"Which function is used to introduce a delay in Python programs?\",\n        options: [\n            \"A) time.sleep()\",\n            \"B) delay()\",\n            \"C) wait()\",\n            \"D) python.sleep()\"\n        ],\n        type: \"multiple-choice\",\n        answer: \"A\",\n        points: 25,\n        explanation: \"The sleep() function from the time module pauses execution for the specified number of seconds.\",\n        tutorialLink: \"https://www.w3schools.com/python/python_datetime.asp\"\n    },\n    {\n        id: 31,\n        text: \"Complete the code to select all elements from a list with even indices:\",\n        code: `my_list = [10, 20, 30, 40, 50]\neven_indices = my_list[___]`,\n        type: \"fill-blank\",\n        answer: \"::2\",\n        points: 25,\n        explanation: \"The slice notation ::2 selects every second element, starting from index 0 (i.e., elements with even indices).\",\n        tutorialLink: \"https://www.w3schools.com/python/python_lists_slicing.asp\"\n    },\n    {\n        id: 32,\n        text: \"Which method is used to join elements of a list into a string?\",\n        options: [\n            \"A) \\\"-\\\".concat(my_list)\",\n            \"B) \\\"-\\\".join(my_list)\",\n            \"C) my_list.join(\\\"-\\\")\",\n            \"D) combine(my_list, \\\"-\\\")\"\n        ],\n        type: \"multiple-choice\",\n        answer: \"B\",\n        points: 25,\n        explanation: \"The join() method is called on a string separator and takes an iterable as an argument, joining its elements with the separator.\",\n        tutorialLink: \"https://www.w3schools.com/python/ref_string_join.asp\"\n    },\n    {\n        id: 33,\n        text: \"What is the correct way to unpack a list or tuple in Python?\",\n        options: [\n            \"A) a, b, c = [1, 2, 3]\",\n            \"B) a + b + c = [1, 2, 3]\",\n            \"C) unpack(a, b, c) = [1, 2, 3]\",\n            \"D) [a, b, c] = [1, 2, 3]\"\n        ],\n        type: \"multiple-choice\",\n        answer: \"A\",\n        points: 25,\n        explanation: \"Python supports unpacking sequences directly into variables using syntax like a, b, c = [1, 2, 3].\",\n        tutorialLink: \"https://www.w3schools.com/python/python_tuples_unpack.asp\"\n    },\n    {\n        id: 34,\n        text: \"Complete the code to define a class with a constructor:\",\n        code: `class Person:\n    def ___(self, name, age):\n        self.name = name\n        self.age = age`,\n        type: \"fill-blank\",\n        answer: \"__init__\",\n        points: 25,\n        explanation: \"The __init__ method is the constructor in Python classes, called when an instance is created.\",\n        tutorialLink: \"https://www.w3schools.com/python/python_classes.asp\"\n    },\n    {\n        id: 35,\n        text: \"Which function returns the first element in a list that satisfies a condition?\",\n        options: [\n            \"A) filter()\",\n            \"B) find()\",\n            \"C) next(filter())\",\n            \"D) list.find()\"\n        ],\n        type: \"multiple-choice\",\n        answer: \"C\",\n        points: 25,\n        explanation: \"Python doesn't have a direct find() method. You can use next() with filter() or a list comprehension with a condition.\",\n        tutorialLink: \"https://www.w3schools.com/python/ref_func_filter.asp\"\n    },\n    {\n        id: 36,\n        text: \"What is the result of '10' + 5 in Python?\",\n        options: [\n            \"A) 15\",\n            \"B) '105'\",\n            \"C) Error\",\n            \"D) '10+5'\"\n        ],\n        type: \"multiple-choice\",\n        answer: \"C\",\n        points: 25,\n        explanation: \"In Python, you cannot add a string and an integer directly. This raises a TypeError. You would need to convert types first.\",\n        tutorialLink: \"https://www.w3schools.com/python/python_casting.asp\"\n    },\n    {\n        id: 37,\n        text: \"Complete the code to unpack a list with unknown length:\",\n        code: `first, second, *___ = [1, 2, 3, 4, 5]`,\n        type: \"fill-blank\",\n        answer: \"rest\",\n        points: 25,\n        explanation: \"The asterisk (*) syntax collects the remaining elements of a sequence. Any variable name can be used, but 'rest' is common.\",\n        tutorialLink: \"https://www.w3schools.com/python/python_arrays.asp\"\n    },\n    {\n        id: 38,\n        text: \"Which Python feature allows you to create reusable, stateless functions?\",\n        options: [\n            \"A) Decorators\",\n            \"B) Generators\",\n            \"C) Lambda functions\",\n            \"D) Magic methods\"\n        ],\n        type: \"multiple-choice\",\n        answer: \"C\",\n        points: 25,\n        explanation: \"Lambda functions are small anonymous functions defined with the lambda keyword, typically used for simple operations.\",\n        tutorialLink: \"https://www.w3schools.com/python/python_lambda.asp\"\n    },\n    {\n        id: 39,\n        text: \"Complete the lambda function:\",\n        code: `multiply = ___ x, y: x * y`,\n        type: \"fill-blank\",\n        answer: \"lambda\",\n        points: 25,\n        explanation: \"Lambda functions are defined using the 'lambda' keyword, followed by parameters, a colon, and the expression.\",\n        tutorialLink: \"https://www.w3schools.com/python/python_lambda.asp\"\n    },\n    {\n        id: 40,\n        text: \"Which method transforms each element in a list to create a new list?\",\n        options: [\n            \"A) list.each()\",\n            \"B) map()\",\n            \"C) list.transform()\",\n            \"D) list.apply()\"\n        ],\n        type: \"multiple-choice\",\n        answer: \"B\",\n        points: 25,\n        explanation: \"The map() function applies a given function to each item in an iterable and returns an iterator of results.\",\n        tutorialLink: \"https://www.w3schools.com/python/ref_func_map.asp\"\n    }\n];\nconst examConfig = {\n    totalPoints: 1000,\n    passingScore: 800,\n    timeLimit: 2400,\n    allowedAttempts: Infinity\n};\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./app/data/questionsPy1.js\n"));

/***/ })

});